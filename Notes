React and Redux

React and Redux are often mentioned together

The dev that created redux was a react dev who wanted to make the process of sharing data cross components easier

We have looked at how to manage the flow of shared data with redux

In this course we will build a react comp and learn how manage state locally at comp level and through the entire app with redux



Key Principles

React is a view library that you provide with data
it renders the view in an effecient predictable way
like the dashboard of a car - pushing buttons 

redux simplifies the management of app state
the things behind the front dashboard


Single redux store 
react will subscribe to pieces of data releveant to it in the redux store 
then dispatch actions directly from react comps to trigger store updates 

React components can manage state locally but for more complex projects its better to use the app state in redux single store
exceptions with specific local conditions
you need to use react-redux package
it lets you pass redux state and dispatch to react comps as props

we will create react comps that allow text input
they are added to an array

then we will make a store that manages the message array

then we will use react-redux to connect the redix store with comp and extract local state into redux store 



-----------------------------------------------------------------------------------------------------------------------

Getting Started with React Redux





Start with a DisplayMessages component. Add a constructor to this component and initialize it with a state that has two properties: input, that's set to an empty string, and messages, that's set to an empty array.


in our react component DisplayMessages 

make a constructor 

constructor (props){


give it super to use props further down 

  super(props);


initialise with a state that has 2 props 

class DisplayMessages extends React.Component {

constructor (props){
  super(props);
  this.state={
  input:"",
  messages:[],
}
}
  render() {
    return <div />
  }
};

-----------------------------------------------------------------------------------------------------------------------

Manage State Locally First




First, in the render() method, have the component render an input element, button element, and ul element. When the input element changes, it should trigger a handleChange() method. Also, the input element should render the value of input that's in the component's state. The button element should trigger a submitMessage() method when it's clicked.
Second, write these two methods. The handleChange() method should update the input with what the user is typing. The submitMessage() method should concatenate the current message (stored in input) to the messages array in local state, and clear the value of the input.
Finally, use the ul to map over the array of messages and render it to the screen as a list of li elements.



class DisplayMessages extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      messages: []
    }
  }
  // Add handleChange() and submitMessage() methods here




  render() {
    return (
      <div>
        <h2>Type in a new Message:</h2>
        { /* Render an input, button, and ul below this line */ }

        { /* Change code above this line */ }
      </div>
    );
  }
};




first render our elements 


  render() {
    return (
      <div>
        <h2>Type in a new Message:</h2>
        { /* Render an input, button, and ul below this line */ }
        <input />
        <button />
        <ul />
        { /* Change code above this line */ }
      </div>
    );
  }
};

for our input we can use onChange()


        <input onChange={this.handleChange.bind(this)}/>


now add handleChange and submitMessage method 

handleChange() {}
submitMessage() {}

handleChange takes a param (data)

then we set that to the state 


handleChange(data) {
  this.setState({
    input: data.target.value,
    messages: this.state.messages})
}

our state will now change to input from box 


the button needs a submit message onClick

        <button onClick={this.submitMessage.bind(this)}/>


lets put a label in the button

        <button 
        onClick={this.submitMessage.bind(this)}>Submit</button>


submit message method
we want to set the state again
reset input

spread messages array and then add input


submitMessage() {
  this.setState({
    input: "",
    messages: [...this.state.messages, this.state.input]
  })
}


use the ul to map over array of messages and render to screen as a list of li elements 


        <ul> 
        {this.state.messages.map(function(message){
          return <li>{message}</li>
        })}
        </ul>



here we clear up input to reset to state 

 <input onChange={this.handleChange.bind(this)}
        value={this.state.input}
        />



-----------------------------------------------------------------------------------------------------------------------

Extract State Logic to Redux

Now we have react comp we need to move the locally performing logic to redux.
connect react and redix
we can add new messages


First, define an action type ADD and set it to a const ADD. Next, define an action creator addMessage() which creates the action to add a message. You'll need to pass a message to this action creator and include the message in the returned action.
Then create a reducer called messageReducer() that handles the state for the messages. The initial state should equal an empty array. This reducer should add a message to the array of messages held in state, or return the current state. Finally, create your Redux store and pass it the reducer.


make const

const ADD = 'ADD';


action creator addMessage
const addMessage = message => {
  return {
    type: ADD,
    message
  };
};



messagereducer function with default restore current state 


const messageReducer = (previousState = [], action) => {
  switch (action.type) {
    case ADD:
      return [...previousState, action.message];
      

     default:
      return previousState;
  }
};




add to store 
const store = Redux.createStore(messageReducer);


-----------------------------------------------------------------------------------------------------------------------

Use Provider to Connect Redux to React


provide react access to redux store and actions to dispactch updates
react-redux package

api has two features, Provider and connect

provider - wrapper comp that wraps react app

allows access to store and dispatch func
takes two props - store and child components of app 
eg for an app component 

<Provider store={store}>
  <App/>
</Provider>



The code editor now shows all your Redux and React code from the past several challenges. It includes the Redux store, actions, and the DisplayMessages component. The only new piece is the AppWrapper component at the bottom. Use this top level component to render the Provider from ReactRedux, and pass the Redux store as a prop. Then render the DisplayMessages component as a child. Once you are finished, you should see your React component rendered to the page.
Note: React Redux is available as a global variable here, so you can access the Provider with dot notation. The code in the editor takes advantage of this and sets it to a constant Provider for you to use in the AppWrapper render method.


render Provider from ReactRedux
pass to redux store as prop
render DisplayMessages comp as child

note Provider = const Provider = ReactRedux.Provider;



class AppWrapper extends React.Component {
  // Render the Provider below this line
       render(){
         return (
        <Provider store={store}>
          <DisplayMessages />
        </Provider>
         )
       }
  // Change code above this line
         };


-----------------------------------------------------------------------------------------------------------------------

Map State to Props

with Provider we can provide state and dispatch to react components if specified

this way you can ensure each comp only has access to the state it needs. 
you can accomplish this by creating two functions
mapStateToProps()
mapDispatchToProps()

in the functions you declare the piece of state to have access to and which action creators to dispactch
then connect 

store.subscribe() is used behind the scenes



const state = [];

// Change code below this line

const mapStateToProps = (state) => {
  return {
    messages: state
  }
} 


-----------------------------------------------------------------------------------------------------------------------

Map Dispatch to Props


mapDispatchToProps() function provides specific action creators to react comps so they can dispatch actions against store
similar in structure to mapStateToProps()

returns an object that maps dispatch actions onto property names which become comp props

returns a function that calls dispatch passed in as parameter as we passed state in before
store.dispatch() is used behind the scenes 

eg we have loginUser action creation that takes username as action payload
object returned would look like so

{
  submitLoginUser: function(username) {
    dispatch(loginUser(username));
  }
}





The code editor provides an action creator called addMessage(). Write the function mapDispatchToProps() that takes dispatch as an argument, then returns an object. The object should have a property submitNewMessage set to the dispatch function, which takes a parameter for the new message to add when it dispatches addMessage().




const addMessage = (message) => {
  return {
    type: 'ADD',
    message: message
  }
};

// Change code below this line

let mapDispatchToProps = (dispatch) => {
  return {
    submitNewMessage: message => {
  dispatch(addMessage(message))
}
  }
} 





-----------------------------------------------------------------------------------------------------------------------
Connect Redux to React

map state and dispatch to props of react components

connect method 
thakes two option alrguments
mapStateToProps()
mapDispatchToProps()


pass in funcs as args and call result with comp:

connect(mapStateToProps, mapDispatchToProps)(MyComponent)

you can use nuk to omit an arg 


The code editor has the mapStateToProps() and mapDispatchToProps() functions and a new React component called Presentational. Connect this component to Redux with the connect method from the ReactRedux global object, and call it immediately on the Presentational component. Assign the result to a new const called ConnectedComponent that represents the connected component. That's it, now you're connected to Redux! Try changing either of connect's arguments to null and observe the test results.

const addMessage = (message) => {
  return {
    type: 'ADD',
    message: message
  }
};

const mapStateToProps = (state) => {
  return {
    messages: state
  }
};

const mapDispatchToProps = (dispatch) => {
  return {
    submitNewMessage: (message) => {
      dispatch(addMessage(message));
    }
  }
};

class Presentational extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return <h3>This is a Presentational Component</h3>
  }
};

const connect = ReactRedux.connect;


const ConnectedComponent = connect(mapStateToProps, mapDispatchToProps)(Presentational)


-----------------------------------------------------------------------------------------------------------------------
Connect Redux to the Messages App




Presentational - generally not connected to redux - function of props to show ui

container comps are connected to redux
responsible for dispatching actions to store and pass store state to child comps 

The code editor has all the code you've written in this section so far. The only change is that the React component is renamed to Presentational. Create a new component held in a constant called Container that uses connect to connect the Presentational component to Redux. Then, in the AppWrapper, render the React Redux Provider component. Pass Provider the Redux store as a prop and render Container as a child. Once everything is setup, you will see the messages app rendered to the page again.



// Redux:
const ADD = 'ADD';

const addMessage = (message) => {
  return {
    type: ADD,
    message: message
  }
};

const messageReducer = (state = [], action) => {
  switch (action.type) {
    case ADD:
      return [
        ...state,
        action.message
      ];
    default:
      return state;
  }
};

const store = Redux.createStore(messageReducer);

// React:
class Presentational extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      messages: []
    }
    this.handleChange = this.handleChange.bind(this);
    this.submitMessage = this.submitMessage.bind(this);
  }
  handleChange(event) {
    this.setState({
      input: event.target.value
    });
  }
  submitMessage() {
    this.setState((state) => {
      const currentMessage = state.input;
      return {
        input: '',
        messages: state.messages.concat(currentMessage)
      };
    });
  }
  render() {
    return (
      <div>
        <h2>Type in a new Message:</h2>
        <input
          value={this.state.input}
          onChange={this.handleChange}/><br/>
        <button onClick={this.submitMessage}>Submit</button>
        <ul>
          {this.state.messages.map( (message, idx) => {
              return (
                 <li key={idx}>{message}</li>
              )
            })
          }
        </ul>
      </div>
    );
  }
};

// React-Redux:
const mapStateToProps = (state) => {
  return { messages: state }
};

const mapDispatchToProps = (dispatch) => {
  return {
    submitNewMessage: (newMessage) => {
       dispatch(addMessage(newMessage))
    }
  }
};

const Provider = ReactRedux.Provider;
const connect = ReactRedux.connect;

// Define the Container component here:


class AppWrapper extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    // Complete the return statement:
    return (null);
  }
};








// Define the Container component here:

const Container = connect(mapStateToProps, mapDispatchToProps)(Presentational)


class AppWrapper extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    // Complete the return statement:
    return (

      <Provider store={store}>
        <Container />
      </Provider>



    );
  }
};



-----------------------------------------------------------------------------------------------------------------------

Extract Local State into Redux


Redux is connected - extract the state management from presentational comp and into redix
it is currently handled locally 


In the Presentational component, first, remove the messages property in the local state. These messages will be managed by Redux. Next, modify the submitMessage() method so that it dispatches submitNewMessage() from this.props, and pass in the current message input from local state as an argument. Because you removed messages from local state, remove the messages property from the call to this.setState() here as well. Finally, modify the render() method so that it maps over the messages received from props rather than state.
Once these changes are made, the app will continue to function the same, except Redux manages the state. This example also illustrates how a component may have local state: your component still tracks user input locally in its own state. You can see how Redux provides a useful state management framework on top of React. You achieved the same result using only React's local state at first, and this is usually possible with simple apps. However, as your apps become larger and more complex, so does your state management, and this is the problem Redux solves.



-----------------------------------------------------------------------------------------------------------------------
Extract Local State into Redux

we wrote react code so we use redux to control state management

now its connected - extract state of state management out of presentational component and into redix

currently state is connected but handled locally in pres comp 

// Redux:
const ADD = 'ADD';

const addMessage = (message) => {
  return {
    type: ADD,
    message: message
  }
};

const messageReducer = (state = [], action) => {
  switch (action.type) {
    case ADD:
      return [
        ...state,
        action.message
      ];
    default:
      return state;
  }
};

const store = Redux.createStore(messageReducer);

// React:
const Provider = ReactRedux.Provider;
const connect = ReactRedux.connect;

// Change code below this line
class Presentational extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      messages: []
    }
    this.handleChange = this.handleChange.bind(this);
    this.submitMessage = this.submitMessage.bind(this);
  }
  handleChange(event) {
    this.setState({
      input: event.target.value
    });
  }
  submitMessage() {
    this.setState((state) => ({
      input: '',
      messages: state.messages.concat(state.input)
    }));
  }
  render() {
    return (
      <div>
        <h2>Type in a new Message:</h2>
        <input
          value={this.state.input}
          onChange={this.handleChange}/><br/>
        <button onClick={this.submitMessage}>Submit</button>
        <ul>
          {this.state.messages.map( (message, idx) => {
              return (
                 <li key={idx}>{message}</li>
              )
            })
          }
        </ul>
      </div>
    );
  }
};
// Change code above this line

const mapStateToProps = (state) => {
  return {messages: state}
};

const mapDispatchToProps = (dispatch) => {
  return {
    submitNewMessage: (message) => {
      dispatch(addMessage(message))
    }
  }
};

const Container = connect(mapStateToProps, mapDispatchToProps)(Presentational);

class AppWrapper extends React.Component {
  render() {
    return (
      <Provider store={store}>
        <Container/>
      </Provider>
    );
  }
};



In the Presentational component, first, remove the messages property in the local state. These messages will be managed by Redux. Next, modify the submitMessage() method so that it dispatches submitNewMessage() from this.props, and pass in the current message input from local state as an argument. Because you removed messages from local state, remove the messages property from the call to this.setState() here as well. Finally, modify the render() method so that it maps over the messages received from props rather than state.
Once these changes are made, the app will continue to function the same, except Redux manages the state. This example also illustrates how a component may have local state: your component still tracks user input locally in its own state. You can see how Redux provides a useful state management framework on top of React. You achieved the same result using only React's local state at first, and this is usually possible with simple apps. However, as your apps become larger and more complex, so does your state management, and this is the problem Redux solves.


use redux to manage presentational component state


remove mesasges in local state 

    this.state = {
      input: "",
}

modify submitMessage() to dispatch submitNewMessage 












//final - manage with redux rather than local state
we went through each instruction
this.props passed in
passed to container render function 
state and dispatch connected as props 



// Redux:
const ADD = 'ADD';

const addMessage = (message) => {
  return {
    type: ADD,
    message: message
  }
};

const messageReducer = (state = [], action) => {
  switch (action.type) {
    case ADD:
      return [
        ...state,
        action.message
      ];
    default:
      return state;
  }
};

const store = Redux.createStore(messageReducer);

// React:
const Provider = ReactRedux.Provider;
const connect = ReactRedux.connect;

// Change code below this line
class Presentational extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      messages: []
    }
    this.handleChange = this.handleChange.bind(this);
    this.submitMessage = this.submitMessage.bind(this);
  }
  handleChange(event) {
    this.setState({
      input: event.target.value
    });
  }
  submitMessage() {
    this.props.submitNewMessage(this.state.input)
    this.setState((state) => ({
      input: '',
    }));
  }
  render() {
    return (
      <div>
        <h2>Type in a new Message:</h2>
        <input
          value={this.state.input}
          onChange={this.handleChange}/><br/>
        <button onClick={this.submitMessage}>Submit</button>
        <ul>
          {this.props.messages.map( (message, idx) => {
              return (
                 <li key={idx}>{message}</li>
              )
            })
          }
        </ul>
      </div>
    );
  }
};
// Change code above this line

const mapStateToProps = (state) => {
  return {messages: state}
};

const mapDispatchToProps = (dispatch) => {
  return {
    submitNewMessage: (message) => {
      dispatch(addMessage(message))
    }
  }
};

const Container = connect(mapStateToProps, mapDispatchToProps)(Presentational);

class AppWrapper extends React.Component {
  render() {
    return (
      <Provider store={store}>
        <Container/>
      </Provider>
    );
  }
};





-----------------------------------------------------------------------------------------------------------------------


Moving Forward From Here

Often we would use these techs with something like node rather than in an ide
npm 

code is similar but uses import statements to pull dependencies 


r + r code often requires cong

https://github.com/facebook/create-react-app
this app is ready to go

you can use Babel as JS preprocess add reactdom and react and external resources and work there 


exapmle syntax

/*
import React from 'react'
import ReactDOM from 'react-dom'
import { Provider, connect } from 'react-redux'
import { createStore, combineReducers, applyMiddleware } from 'redux'
import thunk from 'redux-thunk'

import rootReducer from './redux/reducers'
import App from './components/App'

const store = createStore(
  rootReducer,
  applyMiddleware(thunk)
);

ReactDOM.render(
  <Provider store={store}>
    <App/>
  </Provider>,
  document.getElementById('root')
);
*/

// Only change code below this line

console.log('Now I know React and Redux!')

